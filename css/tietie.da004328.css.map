{"version":3,"sources":["webpack:///src/components/src/components/tietie.vue","webpack:///src/views/src/views/Tietie.vue"],"names":[],"mappings":"AA2GA,qBACA,UAAA,CACA,aAAA,CACA,iBAAA,CACA,WAAA,CACA,KAAA,CACA,OACA,CC/EA,sBACA,YACA","file":"tietie.da004328.css","sourcesContent":["<template>\n<div id=\"cy\">\n</div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport cytoscape from 'cytoscape'\n\nexport default {\n  props: ['tieties'],\n  computed: {\n    ...mapGetters(['face', 'info']),\n  },\n  data() {\n    return { highlightBefore: undefined }\n  },\n  methods: {\n    highlight(node, cy) {\n      const toArray = arrayLike => Array(arrayLike.length).fill().map((_, index) => arrayLike[index])\n      const mid = node.id()\n\n      if (this.highlightBefore === mid) {\n        window.open(`${location.origin}/detail/${mid}`)\n      } else if (this.highlightBefore) {\n        cy.$id(this.highlightBefore)\n          .connectedEdges()\n          .removeClass('blue')\n          .removeClass('orange')\n      }\n      toArray(node.connectedEdges())\n        .forEach(edge => {\n          if (edge.source() === node) {\n            edge.addClass('blue')\n          } else {\n            edge.addClass('orange')\n          }\n        })\n      this.highlightBefore = mid\n    }\n  },\n  mounted() {\n    /* beautify ignore:start */\n    let vtbs = this.tieties\n      |> Object.entries\n      |> #.flatMap(([mid, tietie]) => [mid, ...tietie.flatMap(v => v)])\n        .map(String)\n      |> new Set(#)\n      |> [...#]\n    let nodes = vtbs.map(mid => ({ data: { id: mid, label: this.info[mid]?.uname || '' } }))\n    let directions = this.tieties\n      |> Object.entries\n      |> #.flatMap(([mid, tietie]) => tietie.flatMap(v => v).map(String).map(tie => [mid, tie]))\n        .map(([source, target]) => ({ data: { source, target }}))\n    /* beautify ignore:end */\n    let styles = vtbs\n      .map(mid => [mid, this.face[mid]])\n      .filter(([_mid, face]) => face)\n      .map(([mid, face]) => ({ selector: `#${mid}`, css: { 'background-image': `${face.replace('http://', 'https://')}@256w_256h` } }))\n    const cy = cytoscape({\n      container: document.getElementById('cy'),\n      elements: [\n        ...nodes,\n        ...directions,\n      ],\n      layout: {\n        name: 'cose',\n        directed: true,\n      },\n      style: [{\n        selector: 'node',\n        css: {\n          height: 80,\n          width: 80,\n          'background-fit': 'cover',\n          'border-color': '#000',\n          'border-width': 3,\n          'border-opacity': 0.5,\n          content: 'data(label)',\n        },\n      }, {\n        selector: 'edge',\n        css: {\n          'curve-style': 'bezier',\n          width: 6,\n          'target-arrow-shape': 'triangle',\n        },\n      }, {\n        selector: '.blue',\n        css: {\n          'line-color': 'rgb(100,130,255)'\n        },\n      }, {\n        selector: '.orange',\n        css: {\n          'line-color': 'orange'\n        },\n      }, ...styles],\n    })\n    cy.on('click', 'node', e => {\n      this.highlight(e.target, cy)\n    })\n  },\n}\n</script>\n\n<style scoped>\n#cy {\n  width: 100%;\n  display: block;\n  position: absolute;\n  height: 100%;\n  top: 0;\n  right: 0;\n}\n</style>\n","<template>\n<section class=\"hero is-fullheight\">\n  <p class=\"gap\">贴贴 (上船)</p>\n  <div id=\"cy\" class=\"hero-body\" v-if=\"!loaded\">\n    <progress class=\"progress\" max=\"100\"></progress>\n  </div>\n  <tietie v-else :tieties=\"tieties\"></tietie>\n</section>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\n\nimport { get } from '@/socket'\n\nimport tietie from '@/components/tietie'\n\nexport default {\n  data: () => ({ tieties: undefined }),\n  computed: {\n    ...mapGetters(['info']),\n    loaded() {\n      return Object.keys(this.info).length && this.tieties\n    },\n  },\n  async mounted() {\n    this.tieties = await get('fullGuard', 'tietie')\n  },\n  components: {\n    tietie,\n  },\n}\n</script>\n\n<style scoped>\n.gap {\n  padding: 10px;\n}\n</style>\n"]}